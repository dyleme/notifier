openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
tags:
  - name: Authentication
    description: Authentication
  - name: Tasks
    description: Create and manage your tasks
  - name: Basic tasks
    description: Create and manage your basic tasks
  - name: Periodic tasks
    description: Create and manage your periodic tasks
  - name: Events
    description: Create and manager your events
  - name: Tags
    description: Create and manage your tags
paths:
  /auth/start-binding:
    post:
      summary: Start binding user to tg account
      tags:
        - Authentication
      security:
        - apiKeyAuth: []
      description: Start binding user to tg account
      operationId: startBindingToTG
      requestBody:
        description: Bind body
        content:
          application/json:
            schema:
              required:
                - tgNickname
                - password
              type: object
              properties:
                tgNickname:
                  type: string
                  example: "@nickname"
                password:
                  type: string
                  description: Password
                  format: password
                  example: password
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "405":
          description: Invalid input

  /auth/bind:
    post:
      summary: Bind user to tg account
      tags:
        - Authentication
      security:
        - apiKeyAuth: []
      description: Bind user to tg account
      operationId: bindToTG
      requestBody:
        description: Bind body
        content:
          application/json:
            schema:
              required:
                - tgNickname
                - code
              type: object
              properties:
                tgNickname:
                  type: string
                  example: "@nickname"
                code:
                  type: string
                  description: code gained from TG
                  example: "3809435"
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input
  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      security:
        - apiKeyAuth: []
      description: Login user and get token
      operationId: login
      requestBody:
        description: Login body
        content:
          application/json:
            schema:
              required:
                - loginString
                - password
              type: object
              properties:
                loginString:
                  type: string
                  description: nickname or email of user
                  example: Nagibator228
                password:
                  type: string
                  description: Password
                  format: password
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "405":
          description: Invalid input

  /events:
    get:
      summary: List events
      tags:
        - Events
      security:
        - bearerAuth: []
      description: List events
      operationId: listEvents
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          schema:
            type: string
            format: date-time
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/tagsParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "405":
          description: Invalid input

  /events/{eventID}:
    get:
      summary: Get task
      tags:
        - Events
      security:
        - bearerAuth: []
      description: Get task
      operationId: getEvent
      parameters:
        - in: path
          name: eventID
          schema:
            type: integer
          required: true
          description: event id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "405":
          description: Invalid input

    put:
      summary: Update event
      tags:
        - Events
      security:
        - bearerAuth: []
      description: Set done status
      operationId: setEventDoneStatus
      parameters:
        - in: path
          name: eventID
          schema:
            type: integer
          required: true
          description: Event id
      requestBody:
        description: Update event request
        content:
          application/json:
            schema:
              required:
                - done
              type: object
              properties:
                done:
                  type: boolean
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /events/{eventID}/reschedule:
    patch:
      summary: Update event
      tags:
        - Events
      security:
        - bearerAuth: []
      description: Reschedule event
      operationId: rescheduleEvent
      parameters:
        - in: path
          name: eventID
          schema:
            type: integer
          required: true
          description: Event id
      requestBody:
        description: Update event request
        content:
          application/json:
            schema:
              required:
                - done
                - nextSendTime
              type: object
              properties:
                nextSendTime:
                  type: string
                  format: date-time
                done:
                  type: boolean
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /basic-tasks:
    get:
      summary: List basic tasks
      tags:
        - Basic tasks
      security:
        - bearerAuth: []
      description: List basic tasks
      operationId: listBasicTasks
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/tagsParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BasicTask"
        "405":
          description: Invalid input

    post:
      summary: Create basic tasks
      tags:
        - Basic tasks
      security:
        - bearerAuth: []
      description: Create basic task
      operationId: createBasicTask
      requestBody:
        description: Create basic task request
        content:
          application/json:
            schema:
              required:
                - text
                - description
                - sendTime
                - tags
                - notify
              type: object
              properties:
                done:
                  type: boolean
                text:
                  type: string
                  example: Task text
                description:
                  type: string
                  example: Description
                sendTime:
                  type: string
                  format: date-time
                notificationParams:
                  $ref: "#/components/schemas/NotificationParams"
                tags:
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                notify:
                  type: boolean
                  description: Shoud this task be notified
                  example: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BasicTask"
        "405":
          description: Invalid input

  /basic-tasks/{taskID}:
    get:
      summary: List basic tasks
      tags:
        - Basic tasks
      security:
        - bearerAuth: []
      description: Get basic task
      operationId: getBasicTask
      parameters:
        - in: path
          name: taskID
          schema:
            type: integer
          required: true
          description: task id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicTask"
        "405":
          description: Invalid input

    put:
      summary: Update basic task
      tags:
        - Basic tasks
      security:
        - bearerAuth: []
      description: Update basic task
      operationId: updateBasicTask
      parameters:
        - in: path
          name: taskID
          schema:
            type: integer
          required: true
          description: task id
      requestBody:
        description: Create basic task request
        content:
          application/json:
            schema:
              required:
                - text
                - description
                - sendTime
                - tags
                - notify
              type: object
              properties:
                done:
                  type: boolean
                text:
                  type: string
                  example: Task text
                description:
                  type: string
                  example: Description
                sendTime:
                  type: string
                  format: date-time
                notificationParams:
                  $ref: "#/components/schemas/NotificationParams"
                tags:
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                notify:
                  type: boolean
                  example: true
                  description: Shoud this task be notified
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /periodic-tasks:
    get:
      summary: List periodic tasks
      tags:
        - Periodic tasks
      security:
        - bearerAuth: []
      description: List periodic tasks
      operationId: listPeriodicTasks
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/tagsParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PeriodicTask"
        "405":
          description: Invalid input

    post:
      summary: Create periodic tasks
      tags:
        - Periodic tasks
      security:
        - bearerAuth: []
      description: Create periodic task
      operationId: createPeriodicTask
      requestBody:
        description: Create periodic task request
        content:
          application/json:
            schema:
              required:
                - text
                - start
                - smallestPeriod
                - biggestPeriod
                - tags
                - notify
              type: object
              properties:
                text:
                  type: string
                  example: Task text
                description:
                  type: string
                  example: Description
                smallestPeriod:
                  type: integer
                  minimum: 1
                  example: 5
                  description: minimum amount of days between events
                biggestPeriod:
                  type: integer
                  minimum: 1
                  example: 10
                  description: maximum amount of days between events
                start:
                  type: string
                  description: Start time from the beginning of the day
                  format: iso8601
                  example: 17h15m
                notificationParams:
                  $ref: "#/components/schemas/NotificationParams"
                tags:
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                notify:
                  type: boolean
                  description: Shoud this task be notified
                  example: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PeriodicTask"
        "405":
          description: Invalid input

  /periodic-tasks/{taskID}:
    get:
      summary: List periodic tasks
      tags:
        - Periodic tasks
      security:
        - bearerAuth: []
      description: Get periodic task
      operationId: getPeriodicTask
      parameters:
        - in: path
          name: taskID
          schema:
            type: integer
          required: true
          description: task id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeriodicTask"
        "405":
          description: Invalid input

    put:
      summary: Update periodic task
      tags:
        - Periodic tasks
      security:
        - bearerAuth: []
      description: Update periodic task
      operationId: updatePeriodicTask
      parameters:
        - in: path
          name: taskID
          schema:
            type: integer
          required: true
          description: task id
      requestBody:
        description: Create periodic task request
        content:
          application/json:
            schema:
              required:
                - text
                - start
                - smallestPeriod
                - biggestPeriod
                - tags
                - notify
              type: object
              properties:
                text:
                  type: string
                  example: Task text
                description:
                  type: string
                  example: Description
                smallestPeriod:
                  type: integer
                  minimum: 1
                  example: 5
                  description: minimum amount of days between events
                biggestPeriod:
                  type: integer
                  minimum: 1
                  example: 10
                  description: maximum amount of days between events
                start:
                  type: string
                  description: Start time from the beginning of the day
                  format: iso8601
                  example: 17h15m
                notificationParams:
                  $ref: "#/components/schemas/NotificationParams"
                tags:
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                notify:
                  type: boolean
                  description: Shoud this task be notified
                  example: true
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /default-notification-params:
    get:
      summary: Get default notification params
      tags:
        - Notification params
      security:
        - bearerAuth: []
      description: Get default notification params
      operationId: getDefaultNotificationParams
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationParams"
        "405":
          description: Invalid input

    put:
      summary: Update default notification params
      tags:
        - Notification params
      security:
        - bearerAuth: []
      description: Update default notification params
      operationId: updateDefaultNotificationParams
      requestBody:
        description: Update default notification params
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationParams"
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /tags:
    get:
      summary: List tags
      tags:
        - Tags
      security:
        - bearerAuth: []
      description: List tags
      operationId: listTags
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"

        "405":
          description: Invalid input

    post:
      summary: Create tag
      tags:
        - Tags
      security:
        - bearerAuth: []
      description: Create new tag
      operationId: createTag
      requestBody:
        description: Create tag params
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Tag name

      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

  /tags/{tagID}:
    get:
      summary: Get tag
      tags:
        - Tags
      security:
        - bearerAuth: []
      description: Get tag
      operationId: getTag
      parameters:
        - in: path
          name: tagID
          schema:
            type: integer
          required: true
          description: tag id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        "405":
          description: Invalid input

    put:
      summary: Update tag
      tags:
        - Tags
      security:
        - bearerAuth: []
      description: Update tag
      operationId: updateTag
      parameters:
        - in: path
          name: tagID
          schema:
            type: integer
          required: true
          description: tag id
      requestBody:
        description: Update tag params
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input

components:
  # define reusable parameters:
  parameters:
    limitParam:
      name: limit
      in: query
      description: Limits the number of returned results
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
    offsetParam:
      name: offset
      in: query
      description: Offset from which start returned results
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
    tagsParam:
      name: tagIDs
      in: query
      required: false
      schema:
        type: array
        items:
          type: integer
  schemas:
    Tokens:
      type: object
      properties:
        accessToken:
          $ref: "#/components/schemas/Token"
        refreshToken:
          $ref: "#/components/schemas/Token"

    Token:
      type: string
      description: Jwt token
      #      format: byte
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI
    #      required: true

    Event:
      required:
        - id
        - userID
        - text
        - taskType
        - taskID
        - nextSendTime
        - firstSendTime
        - done
        - tags
        - notify
      type: object
      properties:
        id:
          type: integer
          example: 12542
        text:
          type: string
          example: Task text
        description:
          type: string
          example: Description
        taskType:
          $ref: "#/components/schemas/TaskType"
        taskID:
          type: integer
          example: 83532
        nextSendTime:
          type: string
          format: date-time
        firstSendTime:
          type: string
          format: date-time
        done:
          type: boolean
        notificationParams:
          $ref: "#/components/schemas/NotificationParams"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        notify:
          type: boolean
          description: Shoud this task be notified
          example: true

    BasicTask:
      required:
        - id
        - text
        - sendTime
        - tags
        - notify
      type: object
      properties:
        id:
          type: integer
          example: 12542
        text:
          type: string
          example: Task text
        description:
          type: string
          example: Description
        sendTime:
          type: string
          format: date-time
        notificationParams:
          $ref: "#/components/schemas/NotificationParams"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        notify:
          type: boolean
          description: Shoud this task be notified
          example: true

    PeriodicTask:
      required:
        - id
        - text
        - start
        - smallestPeriod
        - biggestPeriod
        - tags
        - notify
      type: object
      properties:
        id:
          type: integer
          example: 12542
        text:
          type: string
          example: Task text
        description:
          type: string
          example: Description
        smallestPeriod:
          type: integer
          minimum: 1
          example: 5
          description: minimum amount of days between events
        biggestPeriod:
          type: integer
          minimum: 1
          example: 10
          description: maximum amount of days between events
        start:
          type: string
          description: Start time from the beginning of the day
          format: iso8601
          example: 17h15m
        notificationParams:
          $ref: "#/components/schemas/NotificationParams"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        notify:
          type: boolean
          description: Shoud this task be notified
          example: true

    TaskType:
      type: string
      enum:
        - basic
        - periodic

    Tag:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          example: 12542
        name:
          type: string
          example: Task text

    NotificationParams:
      required:
        - period
        - notificationChannel
      type: object
      properties:
        period:
          type: string
          format: iso8601
          example: 5m
        notificationChannel:
          $ref: "#/components/schemas/NotificationChannel"

    NotificationChannel:
      type: object
      properties:
        cmd:
          type: string
        telegram:
          type: integer
        webhook:
          type: string

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      name: api_key
      in: header

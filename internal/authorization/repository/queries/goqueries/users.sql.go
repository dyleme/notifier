// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package goqueries

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (
    tg_id
)
VALUES (
    ?1
) RETURNING id, tg_id, timezone_offset, timezone_dst
`

func (q *Queries) AddUser(ctx context.Context, db DBTX, tgID int64) (User, error) {
	row := db.QueryRowContext(ctx, addUser, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
	)
	return i, err
}

const findUserByTgID = `-- name: FindUserByTgID :one
SELECT id, tg_id, timezone_offset, timezone_dst
FROM users
WHERE tg_id = ?1
`

func (q *Queries) FindUserByTgID(ctx context.Context, db DBTX, tgID int64) (User, error) {
	row := db.QueryRowContext(ctx, findUserByTgID, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, tg_id, timezone_offset, timezone_dst 
FROM users
WHERE id = ?1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, id int64) (User, error) {
	row := db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET timezone_offset = ?1,
    timezone_dst = ?2
WHERE tg_id = ?3
`

type UpdateUserParams struct {
	TimezoneOffset int64 `db:"timezone_offset"`
	TimezoneDst    int64 `db:"timezone_dst"`
	TgID           int64 `db:"tg_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) error {
	_, err := db.ExecContext(ctx, updateUser, arg.TimezoneOffset, arg.TimezoneDst, arg.TgID)
	return err
}

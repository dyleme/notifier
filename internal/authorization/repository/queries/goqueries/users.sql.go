// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package goqueries

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (
    tg_id
)
VALUES (
    ?1
) RETURNING id, tg_id, timezone_offset, timezone_dst
`

func (q *Queries) AddUser(ctx context.Context, db DBTX, tgID int64) (User, error) {
	row := db.QueryRowContext(ctx, addUser, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
	)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT id, tg_id, timezone_offset, timezone_dst
FROM users
WHERE tg_id = ?1
`

func (q *Queries) FindUser(ctx context.Context, db DBTX, tgID int64) (User, error) {
	row := db.QueryRowContext(ctx, findUser, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec




UPDATE users
SET timezone_offset = ?1,
    timezone_dst = ?2
WHERE tg_id = ?3
`

type UpdateUserParams struct {
	TimezoneOffset int64 `db:"timezone_offset"`
	TimezoneDst    int64 `db:"timezone_dst"`
	TgID           int64 `db:"tg_id"`
}

// -- name: AddBindingAttempt :exec
// INSERT INTO binding_attempts (
//
//	tg_id,
//	code,
//	password_hash
//
// ) VALUES (
//
//	@tg_id,
//	@code,
//	@password_hash
//
// );
// -- name: GetLatestBindingAttempt :one
// SELECT *
// FROM binding_attempts
// WHERE tg_id = @tg_id
// ORDER BY login_timestamp DESC
// LIMIT 1;
// -- name: UpdateBindingAttempt :exec
// UPDATE binding_attempts
// SET done = @done
// WHERE id = @id;
// -- name: GetLoginParameters :one
// SELECT id,
//
//	password_hash
//
// FROM users
// WHERE tg_nickname = @tg_nickname;
func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) error {
	_, err := db.ExecContext(ctx, updateUser, arg.TimezoneOffset, arg.TimezoneDst, arg.TgID)
	return err
}

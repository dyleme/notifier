// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package goqueries

import (
	"context"
)

const addTask = `-- name: AddTask :one
INSERT INTO tasks (
  text,
  description,
  user_id,
  type,
  start,
  event_creation_params
) VALUES (
  ?,?,?,?,time(?),?
) RETURNING id, created_at, text, description, user_id, type, start, event_creation_params
`

type AddTaskParams struct {
	Text                string      `db:"text"`
	Description         string      `db:"description"`
	UserID              int64       `db:"user_id"`
	Type                string      `db:"type"`
	Time                interface{} `db:"time"`
	EventCreationParams interface{} `db:"event_creation_params"`
}

func (q *Queries) AddTask(ctx context.Context, db DBTX, arg AddTaskParams) (Task, error) {
	row := db.QueryRowContext(ctx, addTask,
		arg.Text,
		arg.Description,
		arg.UserID,
		arg.Type,
		arg.Time,
		arg.EventCreationParams,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Type,
		&i.Start,
		&i.EventCreationParams,
	)
	return i, err
}

const countListSingleTasks = `-- name: CountListSingleTasks :one
SELECT COUNT(*)
FROM tasks
`

func (q *Queries) CountListSingleTasks(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countListSingleTasks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteTask = `-- name: DeleteTask :many
DELETE
FROM tasks
WHERE id      = ?
  AND user_id = ?
RETURNING id, created_at, text, description, user_id, type, start, event_creation_params
`

type DeleteTaskParams struct {
	ID     int64 `db:"id"`
	UserID int64 `db:"user_id"`
}

func (q *Queries) DeleteTask(ctx context.Context, db DBTX, arg DeleteTaskParams) ([]Task, error) {
	rows, err := db.QueryContext(ctx, deleteTask, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Type,
			&i.Start,
			&i.EventCreationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTask = `-- name: GetTask :one
SELECT id, created_at, text, description, user_id, type, start, event_creation_params
FROM tasks
WHERE id      = ?
  AND user_id = ?
`

type GetTaskParams struct {
	ID     int64 `db:"id"`
	UserID int64 `db:"user_id"`
}

func (q *Queries) GetTask(ctx context.Context, db DBTX, arg GetTaskParams) (Task, error) {
	row := db.QueryRowContext(ctx, getTask, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Type,
		&i.Start,
		&i.EventCreationParams,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, created_at, text, description, user_id, type, start, event_creation_params
FROM tasks
WHERE user_id = ?
ORDER BY bt.id DESC
LIMIT ? OFFSET ?
`

type ListTasksParams struct {
	UserID int64 `db:"user_id"`
	Limit  int64 `db:"limit"`
	Offset int64 `db:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, db DBTX, arg ListTasksParams) ([]Task, error) {
	rows, err := db.QueryContext(ctx, listTasks, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Type,
			&i.Start,
			&i.EventCreationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET text        = ?,
    description = ?,
    event_creation_params = ?,
    start = time(?)
WHERE id = ?
  AND user_id = ?
`

type UpdateTaskParams struct {
	Text                string      `db:"text"`
	Description         string      `db:"description"`
	EventCreationParams interface{} `db:"event_creation_params"`
	Time                interface{} `db:"time"`
	ID                  int64       `db:"id"`
	UserID              int64       `db:"user_id"`
}

func (q *Queries) UpdateTask(ctx context.Context, db DBTX, arg UpdateTaskParams) error {
	_, err := db.ExecContext(ctx, updateTask,
		arg.Text,
		arg.Description,
		arg.EventCreationParams,
		arg.Time,
		arg.ID,
		arg.UserID,
	)
	return err
}

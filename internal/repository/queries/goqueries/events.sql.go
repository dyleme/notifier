// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package goqueries

import (
	"context"
	"time"
)

const addSending = `-- name: AddSending :one
INSERT INTO sendings (
  task_id,
  done,
  original_sending,
  next_sending
) VALUES (
  ?,?,?,?
) RETURNING id, created_at, task_id, next_sending, original_sending, done
`

type AddSendingParams struct {
	TaskID          int64     `db:"task_id"`
	Done            int64     `db:"done"`
	OriginalSending time.Time `db:"original_sending"`
	NextSending     time.Time `db:"next_sending"`
}

func (q *Queries) AddSending(ctx context.Context, db DBTX, arg AddSendingParams) (Sending, error) {
	row := db.QueryRowContext(ctx, addSending,
		arg.TaskID,
		arg.Done,
		arg.OriginalSending,
		arg.NextSending,
	)
	var i Sending
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TaskID,
		&i.NextSending,
		&i.OriginalSending,
		&i.Done,
	)
	return i, err
}

const deleteSending = `-- name: DeleteSending :many
DELETE FROM sendings
WHERE id = ?1
RETURNING id, created_at, task_id, next_sending, original_sending, done
`

func (q *Queries) DeleteSending(ctx context.Context, db DBTX, id int64) ([]Sending, error) {
	rows, err := db.QueryContext(ctx, deleteSending, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sending
	for rows.Next() {
		var i Sending
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TaskID,
			&i.NextSending,
			&i.OriginalSending,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvent = `-- name: GetEvent :one
SELECT task_id, sending_id, done, original_sending, next_sending, text, description, tg_id, user_id, notification_retry_period_s
FROM events
WHERE sending_id = ?
  AND user_id = ?
`

type GetEventParams struct {
	SendingID int64 `db:"sending_id"`
	UserID    int64 `db:"user_id"`
}

func (q *Queries) GetEvent(ctx context.Context, db DBTX, arg GetEventParams) (Event, error) {
	row := db.QueryRowContext(ctx, getEvent, arg.SendingID, arg.UserID)
	var i Event
	err := row.Scan(
		&i.TaskID,
		&i.SendingID,
		&i.Done,
		&i.OriginalSending,
		&i.NextSending,
		&i.Text,
		&i.Description,
		&i.TgID,
		&i.UserID,
		&i.NotificationRetryPeriodS,
	)
	return i, err
}

const getLatestSending = `-- name: GetLatestSending :one
SELECT id, created_at, task_id, next_sending, original_sending, done FROM sendings
WHERE task_id = ?1
  AND done = 0
ORDER BY next_sending DESC
LIMIT 1
`

func (q *Queries) GetLatestSending(ctx context.Context, db DBTX, taskID int64) (Sending, error) {
	row := db.QueryRowContext(ctx, getLatestSending, taskID)
	var i Sending
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TaskID,
		&i.NextSending,
		&i.OriginalSending,
		&i.Done,
	)
	return i, err
}

const getNearestSendingTime = `-- name: GetNearestSendingTime :one
SELECT next_sending FROM sendings
WHERE done = 0
ORDER BY next_sending ASC
LIMIT 1
`

func (q *Queries) GetNearestSendingTime(ctx context.Context, db DBTX) (time.Time, error) {
	row := db.QueryRowContext(ctx, getNearestSendingTime)
	var next_sending time.Time
	err := row.Scan(&next_sending)
	return next_sending, err
}

const getSendning = `-- name: GetSendning :one
SELECT id, created_at, task_id, next_sending, original_sending, done FROM sendings
WHERE id = ?1
`

func (q *Queries) GetSendning(ctx context.Context, db DBTX, id int64) (Sending, error) {
	row := db.QueryRowContext(ctx, getSendning, id)
	var i Sending
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TaskID,
		&i.NextSending,
		&i.OriginalSending,
		&i.Done,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT task_id, sending_id, done, original_sending, next_sending, text, description, tg_id, user_id, notification_retry_period_s
FROM events
WHERE user_id=?
  AND next_sending >= ?
  AND next_sending <= ?
  AND done = false
ORDER BY next_sending DESC
LIMIT ? OFFSET ?
`

type ListEventsParams struct {
	UserID   int64     `db:"user_id"`
	FromTime time.Time `db:"from_time"`
	ToTime   time.Time `db:"to_time"`
	Limit    int64     `db:"limit"`
	Offset   int64     `db:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, db DBTX, arg ListEventsParams) ([]Event, error) {
	rows, err := db.QueryContext(ctx, listEvents,
		arg.UserID,
		arg.FromTime,
		arg.ToTime,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.TaskID,
			&i.SendingID,
			&i.Done,
			&i.OriginalSending,
			&i.NextSending,
			&i.Text,
			&i.Description,
			&i.TgID,
			&i.UserID,
			&i.NotificationRetryPeriodS,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotSentEvents = `-- name: ListNotSentEvents :many
SELECT task_id, sending_id, done, original_sending, next_sending, text, description, tg_id, user_id, notification_retry_period_s 
FROM events
WHERE done = 0
  AND next_sending <= ?1
ORDER BY next_sending DESC
`

func (q *Queries) ListNotSentEvents(ctx context.Context, db DBTX, till time.Time) ([]Event, error) {
	rows, err := db.QueryContext(ctx, listNotSentEvents, till)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.TaskID,
			&i.SendingID,
			&i.Done,
			&i.OriginalSending,
			&i.NextSending,
			&i.Text,
			&i.Description,
			&i.TgID,
			&i.UserID,
			&i.NotificationRetryPeriodS,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSending = `-- name: UpdateSending :one
UPDATE sendings
SET
  next_sending     = ?,
  original_sending = ?,
  done             = ?
WHERE 
  id = ?
RETURNING id, created_at, task_id, next_sending, original_sending, done
`

type UpdateSendingParams struct {
	NextSending     time.Time `db:"next_sending"`
	OriginalSending time.Time `db:"original_sending"`
	Done            int64     `db:"done"`
	ID              int64     `db:"id"`
}

func (q *Queries) UpdateSending(ctx context.Context, db DBTX, arg UpdateSendingParams) (Sending, error) {
	row := db.QueryRowContext(ctx, updateSending,
		arg.NextSending,
		arg.OriginalSending,
		arg.Done,
		arg.ID,
	)
	var i Sending
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TaskID,
		&i.NextSending,
		&i.OriginalSending,
		&i.Done,
	)
	return i, err
}

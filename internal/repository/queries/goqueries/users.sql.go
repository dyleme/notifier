// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package goqueries

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    tg_id,
    timezone_offset,
    timezone_dst,
    notification_retry_period_s
) VALUES (
    ?,?,?,?
) RETURNING id, tg_id, timezone_offset, timezone_dst, notification_retry_period_s
`

type CreateUserParams struct {
	TgID                     int64 `db:"tg_id"`
	TimezoneOffset           int64 `db:"timezone_offset"`
	TimezoneDst              int64 `db:"timezone_dst"`
	NotificationRetryPeriodS int64 `db:"notification_retry_period_s"`
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (User, error) {
	row := db.QueryRowContext(ctx, createUser,
		arg.TgID,
		arg.TimezoneOffset,
		arg.TimezoneDst,
		arg.NotificationRetryPeriodS,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
		&i.NotificationRetryPeriodS,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, tg_id, timezone_offset, timezone_dst, notification_retry_period_s FROM users
WHERE id = ?1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, id int64) (User, error) {
	row := db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
		&i.NotificationRetryPeriodS,
	)
	return i, err
}

const getUserByTgID = `-- name: GetUserByTgID :one
SELECT id, tg_id, timezone_offset, timezone_dst, notification_retry_period_s FROM users
WHERE tg_id = ?1
`

func (q *Queries) GetUserByTgID(ctx context.Context, db DBTX, tgID int64) (User, error) {
	row := db.QueryRowContext(ctx, getUserByTgID, tgID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TgID,
		&i.TimezoneOffset,
		&i.TimezoneDst,
		&i.NotificationRetryPeriodS,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    timezone_offset = ?1,
    timezone_dst = ?2,
    notification_retry_period_s = ?3
WHERE id = ?4
`

type UpdateUserParams struct {
	TimezoneOffset           int64 `db:"timezone_offset"`
	TimezoneDst              int64 `db:"timezone_dst"`
	NotificationRetryPeriodS int64 `db:"notification_retry_period_s"`
	ID                       int64 `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) error {
	_, err := db.ExecContext(ctx, updateUser,
		arg.TimezoneOffset,
		arg.TimezoneDst,
		arg.NotificationRetryPeriodS,
		arg.ID,
	)
	return err
}

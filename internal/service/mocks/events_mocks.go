// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/Notifier/internal/service (interfaces: EventsRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/events_mocks.go -package=mocks . EventsRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Dyleme/Notifier/internal/domain"
	service "github.com/Dyleme/Notifier/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockEventsRepository is a mock of EventsRepository interface.
type MockEventsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventsRepositoryMockRecorder
}

// MockEventsRepositoryMockRecorder is the mock recorder for MockEventsRepository.
type MockEventsRepositoryMockRecorder struct {
	mock *MockEventsRepository
}

// NewMockEventsRepository creates a new mock instance.
func NewMockEventsRepository(ctrl *gomock.Controller) *MockEventsRepository {
	mock := &MockEventsRepository{ctrl: ctrl}
	mock.recorder = &MockEventsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsRepository) EXPECT() *MockEventsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEventsRepository) Add(arg0 context.Context, arg1 domain.Sending) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockEventsRepositoryMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEventsRepository)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockEventsRepository) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEventsRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEventsRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockEventsRepository) Get(arg0 context.Context, arg1, arg2 int) (domain.Sending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Sending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEventsRepositoryMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEventsRepository)(nil).Get), arg0, arg1, arg2)
}

// GetLatest mocks base method.
func (m *MockEventsRepository) GetLatest(arg0 context.Context, arg1 int) (domain.Sending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", arg0, arg1)
	ret0, _ := ret[0].(domain.Sending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockEventsRepositoryMockRecorder) GetLatest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockEventsRepository)(nil).GetLatest), arg0, arg1)
}

// List mocks base method.
func (m *MockEventsRepository) List(arg0 context.Context, arg1 int, arg2 service.ListEventsFilterParams) ([]domain.Sending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Sending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEventsRepositoryMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEventsRepository)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockEventsRepository) Update(arg0 context.Context, arg1 domain.Sending) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEventsRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEventsRepository)(nil).Update), arg0, arg1)
}

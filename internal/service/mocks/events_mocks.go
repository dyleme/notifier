// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dyleme/Notifier/internal/service (interfaces: EventsRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/events_mocks.go -package=mocks . EventsRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/dyleme/Notifier/internal/domain"
	service "github.com/dyleme/Notifier/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockEventsRepository is a mock of EventsRepository interface.
type MockEventsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventsRepositoryMockRecorder
	isgomock struct{}
}

// MockEventsRepositoryMockRecorder is the mock recorder for MockEventsRepository.
type MockEventsRepositoryMockRecorder struct {
	mock *MockEventsRepository
}

// NewMockEventsRepository creates a new mock instance.
func NewMockEventsRepository(ctrl *gomock.Controller) *MockEventsRepository {
	mock := &MockEventsRepository{ctrl: ctrl}
	mock.recorder = &MockEventsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsRepository) EXPECT() *MockEventsRepositoryMockRecorder {
	return m.recorder
}

// AddSending mocks base method.
func (m *MockEventsRepository) AddSending(ctx context.Context, event domain.Sending) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSending", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSending indicates an expected call of AddSending.
func (mr *MockEventsRepositoryMockRecorder) AddSending(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSending", reflect.TypeOf((*MockEventsRepository)(nil).AddSending), ctx, event)
}

// DeleteSending mocks base method.
func (m *MockEventsRepository) DeleteSending(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSending", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSending indicates an expected call of DeleteSending.
func (mr *MockEventsRepositoryMockRecorder) DeleteSending(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSending", reflect.TypeOf((*MockEventsRepository)(nil).DeleteSending), ctx, id)
}

// Get mocks base method.
func (m *MockEventsRepository) Get(ctx context.Context, eventID, userID int) (domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, eventID, userID)
	ret0, _ := ret[0].(domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEventsRepositoryMockRecorder) Get(ctx, eventID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEventsRepository)(nil).Get), ctx, eventID, userID)
}

// GetLatestSending mocks base method.
func (m *MockEventsRepository) GetLatestSending(ctx context.Context, taskdID int) (domain.Sending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSending", ctx, taskdID)
	ret0, _ := ret[0].(domain.Sending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSending indicates an expected call of GetLatestSending.
func (mr *MockEventsRepositoryMockRecorder) GetLatestSending(ctx, taskdID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSending", reflect.TypeOf((*MockEventsRepository)(nil).GetLatestSending), ctx, taskdID)
}

// GetNearest mocks base method.
func (m *MockEventsRepository) GetNearest(ctx context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearest", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearest indicates an expected call of GetNearest.
func (mr *MockEventsRepositoryMockRecorder) GetNearest(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearest", reflect.TypeOf((*MockEventsRepository)(nil).GetNearest), ctx)
}

// GetSending mocks base method.
func (m *MockEventsRepository) GetSending(ctx context.Context, id int) (domain.Sending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSending", ctx, id)
	ret0, _ := ret[0].(domain.Sending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSending indicates an expected call of GetSending.
func (mr *MockEventsRepositoryMockRecorder) GetSending(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSending", reflect.TypeOf((*MockEventsRepository)(nil).GetSending), ctx, id)
}

// List mocks base method.
func (m *MockEventsRepository) List(ctx context.Context, userID int, params service.ListEventsFilterParams) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID, params)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEventsRepositoryMockRecorder) List(ctx, userID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEventsRepository)(nil).List), ctx, userID, params)
}

// ListNotSent mocks base method.
func (m *MockEventsRepository) ListNotSent(ctx context.Context, till time.Time) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotSent", ctx, till)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotSent indicates an expected call of ListNotSent.
func (mr *MockEventsRepositoryMockRecorder) ListNotSent(ctx, till any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotSent", reflect.TypeOf((*MockEventsRepository)(nil).ListNotSent), ctx, till)
}

// UpdateSending mocks base method.
func (m *MockEventsRepository) UpdateSending(ctx context.Context, sending domain.Sending) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSending", ctx, sending)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSending indicates an expected call of UpdateSending.
func (mr *MockEventsRepositoryMockRecorder) UpdateSending(ctx, sending any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSending", reflect.TypeOf((*MockEventsRepository)(nil).UpdateSending), ctx, sending)
}

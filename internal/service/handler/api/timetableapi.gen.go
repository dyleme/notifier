// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for TaskType.
const (
	Basic    TaskType = "basic"
	Periodic TaskType = "periodic"
)

// BasicTask defines model for BasicTask.
type BasicTask struct {
	Description        *string             `json:"description,omitempty"`
	Id                 int                 `json:"id"`
	NotificationParams *NotificationParams `json:"notificationParams,omitempty"`

	// Notify Shoud this task be notified
	Notify   bool      `json:"notify"`
	SendTime time.Time `json:"sendTime"`
	Tags     []Tag     `json:"tags"`
	Text     string    `json:"text"`
}

// Event defines model for Event.
type Event struct {
	Description        *string             `json:"description,omitempty"`
	Done               bool                `json:"done"`
	FirstSendTime      time.Time           `json:"firstSendTime"`
	Id                 int                 `json:"id"`
	NextSendTime       time.Time           `json:"nextSendTime"`
	NotificationParams *NotificationParams `json:"notificationParams,omitempty"`

	// Notify Shoud this task be notified
	Notify   bool     `json:"notify"`
	Tags     []Tag    `json:"tags"`
	TaskID   int      `json:"taskID"`
	TaskType TaskType `json:"taskType"`
	Text     string   `json:"text"`
}

// NotificationChannel defines model for NotificationChannel.
type NotificationChannel struct {
	Cmd      *string `json:"cmd,omitempty"`
	Telegram *int    `json:"telegram,omitempty"`
	Webhook  *string `json:"webhook,omitempty"`
}

// NotificationParams defines model for NotificationParams.
type NotificationParams struct {
	NotificationChannel NotificationChannel `json:"notificationChannel"`
	Period              string              `json:"period"`
}

// PeriodicTask defines model for PeriodicTask.
type PeriodicTask struct {
	// BiggestPeriod maximum amount of days between events
	BiggestPeriod      int                 `json:"biggestPeriod"`
	Description        *string             `json:"description,omitempty"`
	Id                 int                 `json:"id"`
	NotificationParams *NotificationParams `json:"notificationParams,omitempty"`

	// Notify Shoud this task be notified
	Notify bool `json:"notify"`

	// SmallestPeriod minimum amount of days between events
	SmallestPeriod int `json:"smallestPeriod"`

	// Start Start time from the beginning of the day
	Start string `json:"start"`
	Tags  []Tag  `json:"tags"`
	Text  string `json:"text"`
}

// Tag defines model for Tag.
type Tag struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// TaskType defines model for TaskType.
type TaskType string

// LimitParam defines model for limitParam.
type LimitParam = int32

// OffsetParam defines model for offsetParam.
type OffsetParam = int32

// TagsParam defines model for tagsParam.
type TagsParam = []int

// ListBasicTasksParams defines parameters for ListBasicTasks.
type ListBasicTasksParams struct {
	// Limit Limits the number of returned results
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset from which start returned results
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
	TagIDs *TagsParam   `form:"tagIDs,omitempty" json:"tagIDs,omitempty"`
}

// CreateBasicTaskJSONBody defines parameters for CreateBasicTask.
type CreateBasicTaskJSONBody struct {
	Description        string              `json:"description"`
	Done               *bool               `json:"done,omitempty"`
	NotificationParams *NotificationParams `json:"notificationParams,omitempty"`

	// Notify Shoud this task be notified
	Notify   bool      `json:"notify"`
	SendTime time.Time `json:"sendTime"`
	Tags     []Tag     `json:"tags"`
	Text     string    `json:"text"`
}

// UpdateBasicTaskJSONBody defines parameters for UpdateBasicTask.
type UpdateBasicTaskJSONBody struct {
	Description        string              `json:"description"`
	Done               *bool               `json:"done,omitempty"`
	NotificationParams *NotificationParams `json:"notificationParams,omitempty"`

	// Notify Shoud this task be notified
	Notify   bool      `json:"notify"`
	SendTime time.Time `json:"sendTime"`
	Tags     []Tag     `json:"tags"`
	Text     string    `json:"text"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`
	To   *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Limit Limits the number of returned results
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset from which start returned results
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
	TagIDs *TagsParam   `form:"tagIDs,omitempty" json:"tagIDs,omitempty"`
}

// SetEventDoneStatusJSONBody defines parameters for SetEventDoneStatus.
type SetEventDoneStatusJSONBody struct {
	Done bool `json:"done"`
}

// RescheduleEventJSONBody defines parameters for RescheduleEvent.
type RescheduleEventJSONBody struct {
	Done         bool      `json:"done"`
	NextSendTime time.Time `json:"nextSendTime"`
}

// ListPeriodicTasksParams defines parameters for ListPeriodicTasks.
type ListPeriodicTasksParams struct {
	// Limit Limits the number of returned results
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset from which start returned results
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
	TagIDs *TagsParam   `form:"tagIDs,omitempty" json:"tagIDs,omitempty"`
}

// CreatePeriodicTaskJSONBody defines parameters for CreatePeriodicTask.
type CreatePeriodicTaskJSONBody struct {
	// BiggestPeriod maximum amount of days between events
	BiggestPeriod      int                 `json:"biggestPeriod"`
	Description        *string             `json:"description,omitempty"`
	NotificationParams *NotificationParams `json:"notificationParams,omitempty"`

	// Notify Shoud this task be notified
	Notify bool `json:"notify"`

	// SmallestPeriod minimum amount of days between events
	SmallestPeriod int `json:"smallestPeriod"`

	// Start Start time from the beginning of the day
	Start string `json:"start"`
	Tags  []Tag  `json:"tags"`
	Text  string `json:"text"`
}

// UpdatePeriodicTaskJSONBody defines parameters for UpdatePeriodicTask.
type UpdatePeriodicTaskJSONBody struct {
	// BiggestPeriod maximum amount of days between events
	BiggestPeriod      int                 `json:"biggestPeriod"`
	Description        *string             `json:"description,omitempty"`
	NotificationParams *NotificationParams `json:"notificationParams,omitempty"`

	// Notify Shoud this task be notified
	Notify bool `json:"notify"`

	// SmallestPeriod minimum amount of days between events
	SmallestPeriod int `json:"smallestPeriod"`

	// Start Start time from the beginning of the day
	Start string `json:"start"`
	Tags  []Tag  `json:"tags"`
	Text  string `json:"text"`
}

// ListTagsParams defines parameters for ListTags.
type ListTagsParams struct {
	// Limit Limits the number of returned results
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset from which start returned results
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateTagJSONBody defines parameters for CreateTag.
type CreateTagJSONBody struct {
	Name string `json:"name"`
}

// CreateBasicTaskJSONRequestBody defines body for CreateBasicTask for application/json ContentType.
type CreateBasicTaskJSONRequestBody CreateBasicTaskJSONBody

// UpdateBasicTaskJSONRequestBody defines body for UpdateBasicTask for application/json ContentType.
type UpdateBasicTaskJSONRequestBody UpdateBasicTaskJSONBody

// UpdateDefaultNotificationParamsJSONRequestBody defines body for UpdateDefaultNotificationParams for application/json ContentType.
type UpdateDefaultNotificationParamsJSONRequestBody = NotificationParams

// SetEventDoneStatusJSONRequestBody defines body for SetEventDoneStatus for application/json ContentType.
type SetEventDoneStatusJSONRequestBody SetEventDoneStatusJSONBody

// RescheduleEventJSONRequestBody defines body for RescheduleEvent for application/json ContentType.
type RescheduleEventJSONRequestBody RescheduleEventJSONBody

// CreatePeriodicTaskJSONRequestBody defines body for CreatePeriodicTask for application/json ContentType.
type CreatePeriodicTaskJSONRequestBody CreatePeriodicTaskJSONBody

// UpdatePeriodicTaskJSONRequestBody defines body for UpdatePeriodicTask for application/json ContentType.
type UpdatePeriodicTaskJSONRequestBody UpdatePeriodicTaskJSONBody

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody CreateTagJSONBody

// UpdateTagJSONRequestBody defines body for UpdateTag for application/json ContentType.
type UpdateTagJSONRequestBody = Tag

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List basic tasks
	// (GET /basic-tasks)
	ListBasicTasks(w http.ResponseWriter, r *http.Request, params ListBasicTasksParams)
	// Create basic tasks
	// (POST /basic-tasks)
	CreateBasicTask(w http.ResponseWriter, r *http.Request)
	// List basic tasks
	// (GET /basic-tasks/{taskID})
	GetBasicTask(w http.ResponseWriter, r *http.Request, taskID int)
	// Update basic task
	// (PUT /basic-tasks/{taskID})
	UpdateBasicTask(w http.ResponseWriter, r *http.Request, taskID int)
	// Get default notification params
	// (GET /default-notification-params)
	GetDefaultNotificationParams(w http.ResponseWriter, r *http.Request)
	// Update default notification params
	// (PUT /default-notification-params)
	UpdateDefaultNotificationParams(w http.ResponseWriter, r *http.Request)
	// List events
	// (GET /events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Get task
	// (GET /events/{eventID})
	GetEvent(w http.ResponseWriter, r *http.Request, eventID int)
	// Update event
	// (PUT /events/{eventID})
	SetEventDoneStatus(w http.ResponseWriter, r *http.Request, eventID int)
	// Update event
	// (PATCH /events/{eventID}/reschedule)
	RescheduleEvent(w http.ResponseWriter, r *http.Request, eventID int)
	// List periodic tasks
	// (GET /periodic-tasks)
	ListPeriodicTasks(w http.ResponseWriter, r *http.Request, params ListPeriodicTasksParams)
	// Create periodic tasks
	// (POST /periodic-tasks)
	CreatePeriodicTask(w http.ResponseWriter, r *http.Request)
	// List periodic tasks
	// (GET /periodic-tasks/{taskID})
	GetPeriodicTask(w http.ResponseWriter, r *http.Request, taskID int)
	// Update periodic task
	// (PUT /periodic-tasks/{taskID})
	UpdatePeriodicTask(w http.ResponseWriter, r *http.Request, taskID int)
	// List tags
	// (GET /tags)
	ListTags(w http.ResponseWriter, r *http.Request, params ListTagsParams)
	// Create tag
	// (POST /tags)
	CreateTag(w http.ResponseWriter, r *http.Request)
	// Get tag
	// (GET /tags/{tagID})
	GetTag(w http.ResponseWriter, r *http.Request, tagID int)
	// Update tag
	// (PUT /tags/{tagID})
	UpdateTag(w http.ResponseWriter, r *http.Request, tagID int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List basic tasks
// (GET /basic-tasks)
func (_ Unimplemented) ListBasicTasks(w http.ResponseWriter, r *http.Request, params ListBasicTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create basic tasks
// (POST /basic-tasks)
func (_ Unimplemented) CreateBasicTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List basic tasks
// (GET /basic-tasks/{taskID})
func (_ Unimplemented) GetBasicTask(w http.ResponseWriter, r *http.Request, taskID int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update basic task
// (PUT /basic-tasks/{taskID})
func (_ Unimplemented) UpdateBasicTask(w http.ResponseWriter, r *http.Request, taskID int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get default notification params
// (GET /default-notification-params)
func (_ Unimplemented) GetDefaultNotificationParams(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update default notification params
// (PUT /default-notification-params)
func (_ Unimplemented) UpdateDefaultNotificationParams(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List events
// (GET /events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task
// (GET /events/{eventID})
func (_ Unimplemented) GetEvent(w http.ResponseWriter, r *http.Request, eventID int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update event
// (PUT /events/{eventID})
func (_ Unimplemented) SetEventDoneStatus(w http.ResponseWriter, r *http.Request, eventID int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update event
// (PATCH /events/{eventID}/reschedule)
func (_ Unimplemented) RescheduleEvent(w http.ResponseWriter, r *http.Request, eventID int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List periodic tasks
// (GET /periodic-tasks)
func (_ Unimplemented) ListPeriodicTasks(w http.ResponseWriter, r *http.Request, params ListPeriodicTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create periodic tasks
// (POST /periodic-tasks)
func (_ Unimplemented) CreatePeriodicTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List periodic tasks
// (GET /periodic-tasks/{taskID})
func (_ Unimplemented) GetPeriodicTask(w http.ResponseWriter, r *http.Request, taskID int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update periodic task
// (PUT /periodic-tasks/{taskID})
func (_ Unimplemented) UpdatePeriodicTask(w http.ResponseWriter, r *http.Request, taskID int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List tags
// (GET /tags)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request, params ListTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create tag
// (POST /tags)
func (_ Unimplemented) CreateTag(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get tag
// (GET /tags/{tagID})
func (_ Unimplemented) GetTag(w http.ResponseWriter, r *http.Request, tagID int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update tag
// (PUT /tags/{tagID})
func (_ Unimplemented) UpdateTag(w http.ResponseWriter, r *http.Request, tagID int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListBasicTasks operation middleware
func (siw *ServerInterfaceWrapper) ListBasicTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBasicTasksParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "tagIDs" -------------

	err = runtime.BindQueryParameter("form", true, false, "tagIDs", r.URL.Query(), &params.TagIDs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagIDs", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBasicTasks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateBasicTask operation middleware
func (siw *ServerInterfaceWrapper) CreateBasicTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBasicTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBasicTask operation middleware
func (siw *ServerInterfaceWrapper) GetBasicTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID int

	err = runtime.BindStyledParameterWithOptions("simple", "taskID", chi.URLParam(r, "taskID"), &taskID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBasicTask(w, r, taskID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateBasicTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateBasicTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID int

	err = runtime.BindStyledParameterWithOptions("simple", "taskID", chi.URLParam(r, "taskID"), &taskID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateBasicTask(w, r, taskID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDefaultNotificationParams operation middleware
func (siw *ServerInterfaceWrapper) GetDefaultNotificationParams(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDefaultNotificationParams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateDefaultNotificationParams operation middleware
func (siw *ServerInterfaceWrapper) UpdateDefaultNotificationParams(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDefaultNotificationParams(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "tagIDs" -------------

	err = runtime.BindQueryParameter("form", true, false, "tagIDs", r.URL.Query(), &params.TagIDs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagIDs", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEvent operation middleware
func (siw *ServerInterfaceWrapper) GetEvent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID int

	err = runtime.BindStyledParameterWithOptions("simple", "eventID", chi.URLParam(r, "eventID"), &eventID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEvent(w, r, eventID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SetEventDoneStatus operation middleware
func (siw *ServerInterfaceWrapper) SetEventDoneStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID int

	err = runtime.BindStyledParameterWithOptions("simple", "eventID", chi.URLParam(r, "eventID"), &eventID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetEventDoneStatus(w, r, eventID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RescheduleEvent operation middleware
func (siw *ServerInterfaceWrapper) RescheduleEvent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventID" -------------
	var eventID int

	err = runtime.BindStyledParameterWithOptions("simple", "eventID", chi.URLParam(r, "eventID"), &eventID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RescheduleEvent(w, r, eventID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPeriodicTasks operation middleware
func (siw *ServerInterfaceWrapper) ListPeriodicTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPeriodicTasksParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "tagIDs" -------------

	err = runtime.BindQueryParameter("form", true, false, "tagIDs", r.URL.Query(), &params.TagIDs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagIDs", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPeriodicTasks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePeriodicTask operation middleware
func (siw *ServerInterfaceWrapper) CreatePeriodicTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePeriodicTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPeriodicTask operation middleware
func (siw *ServerInterfaceWrapper) GetPeriodicTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID int

	err = runtime.BindStyledParameterWithOptions("simple", "taskID", chi.URLParam(r, "taskID"), &taskID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPeriodicTask(w, r, taskID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePeriodicTask operation middleware
func (siw *ServerInterfaceWrapper) UpdatePeriodicTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID int

	err = runtime.BindStyledParameterWithOptions("simple", "taskID", chi.URLParam(r, "taskID"), &taskID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePeriodicTask(w, r, taskID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTagsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTag(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTag operation middleware
func (siw *ServerInterfaceWrapper) GetTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tagID" -------------
	var tagID int

	err = runtime.BindStyledParameterWithOptions("simple", "tagID", chi.URLParam(r, "tagID"), &tagID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTag(w, r, tagID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTag operation middleware
func (siw *ServerInterfaceWrapper) UpdateTag(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tagID" -------------
	var tagID int

	err = runtime.BindStyledParameterWithOptions("simple", "tagID", chi.URLParam(r, "tagID"), &tagID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTag(w, r, tagID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/basic-tasks", wrapper.ListBasicTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/basic-tasks", wrapper.CreateBasicTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/basic-tasks/{taskID}", wrapper.GetBasicTask)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/basic-tasks/{taskID}", wrapper.UpdateBasicTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/default-notification-params", wrapper.GetDefaultNotificationParams)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/default-notification-params", wrapper.UpdateDefaultNotificationParams)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events/{eventID}", wrapper.GetEvent)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/events/{eventID}", wrapper.SetEventDoneStatus)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/events/{eventID}/reschedule", wrapper.RescheduleEvent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/periodic-tasks", wrapper.ListPeriodicTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/periodic-tasks", wrapper.CreatePeriodicTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/periodic-tasks/{taskID}", wrapper.GetPeriodicTask)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/periodic-tasks/{taskID}", wrapper.UpdatePeriodicTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.ListTags)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tags", wrapper.CreateTag)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags/{tagID}", wrapper.GetTag)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/tags/{tagID}", wrapper.UpdateTag)
	})

	return r
}

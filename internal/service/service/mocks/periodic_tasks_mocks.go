// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/Notifier/internal/service/service (interfaces: PeriodicTasksRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/periodic_tasks_mocks.go -package=mocks . PeriodicTasksRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Dyleme/Notifier/internal/domain"
	service "github.com/Dyleme/Notifier/internal/service/service"
	gomock "go.uber.org/mock/gomock"
)

// MockPeriodicTasksRepository is a mock of PeriodicTasksRepository interface.
type MockPeriodicTasksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPeriodicTasksRepositoryMockRecorder
	isgomock struct{}
}

// MockPeriodicTasksRepositoryMockRecorder is the mock recorder for MockPeriodicTasksRepository.
type MockPeriodicTasksRepositoryMockRecorder struct {
	mock *MockPeriodicTasksRepository
}

// NewMockPeriodicTasksRepository creates a new mock instance.
func NewMockPeriodicTasksRepository(ctrl *gomock.Controller) *MockPeriodicTasksRepository {
	mock := &MockPeriodicTasksRepository{ctrl: ctrl}
	mock.recorder = &MockPeriodicTasksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeriodicTasksRepository) EXPECT() *MockPeriodicTasksRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPeriodicTasksRepository) Add(ctx context.Context, task domain.PeriodicTask) (domain.PeriodicTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, task)
	ret0, _ := ret[0].(domain.PeriodicTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPeriodicTasksRepositoryMockRecorder) Add(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPeriodicTasksRepository)(nil).Add), ctx, task)
}

// Delete mocks base method.
func (m *MockPeriodicTasksRepository) Delete(ctx context.Context, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPeriodicTasksRepositoryMockRecorder) Delete(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPeriodicTasksRepository)(nil).Delete), ctx, taskID)
}

// Get mocks base method.
func (m *MockPeriodicTasksRepository) Get(ctx context.Context, taskID int) (domain.PeriodicTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, taskID)
	ret0, _ := ret[0].(domain.PeriodicTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeriodicTasksRepositoryMockRecorder) Get(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeriodicTasksRepository)(nil).Get), ctx, taskID)
}

// List mocks base method.
func (m *MockPeriodicTasksRepository) List(ctx context.Context, userID int, params service.ListFilterParams) ([]domain.PeriodicTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID, params)
	ret0, _ := ret[0].([]domain.PeriodicTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPeriodicTasksRepositoryMockRecorder) List(ctx, userID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPeriodicTasksRepository)(nil).List), ctx, userID, params)
}

// Update mocks base method.
func (m *MockPeriodicTasksRepository) Update(ctx context.Context, task domain.PeriodicTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPeriodicTasksRepositoryMockRecorder) Update(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeriodicTasksRepository)(nil).Update), ctx, task)
}

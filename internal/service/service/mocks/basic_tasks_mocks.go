// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/Notifier/internal/service/service (interfaces: SingleTaskRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/basic_tasks_mocks.go -package=mocks . SingleTaskRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Dyleme/Notifier/internal/domain"
	service "github.com/Dyleme/Notifier/internal/service/service"
	gomock "go.uber.org/mock/gomock"
)

// MockSingleTaskRepository is a mock of SingleTaskRepository interface.
type MockSingleTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSingleTaskRepositoryMockRecorder
}

// MockSingleTaskRepositoryMockRecorder is the mock recorder for MockSingleTaskRepository.
type MockSingleTaskRepositoryMockRecorder struct {
	mock *MockSingleTaskRepository
}

// NewMockSingleTaskRepository creates a new mock instance.
func NewMockSingleTaskRepository(ctrl *gomock.Controller) *MockSingleTaskRepository {
	mock := &MockSingleTaskRepository{ctrl: ctrl}
	mock.recorder = &MockSingleTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleTaskRepository) EXPECT() *MockSingleTaskRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSingleTaskRepository) Add(arg0 context.Context, arg1 domain.SingleTask) (domain.SingleTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(domain.SingleTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockSingleTaskRepositoryMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSingleTaskRepository)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSingleTaskRepository) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSingleTaskRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSingleTaskRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockSingleTaskRepository) Get(arg0 context.Context, arg1 int) (domain.SingleTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.SingleTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSingleTaskRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSingleTaskRepository)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockSingleTaskRepository) List(arg0 context.Context, arg1 int, arg2 service.ListFilterParams) ([]domain.SingleTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.SingleTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSingleTaskRepositoryMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSingleTaskRepository)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockSingleTaskRepository) Update(arg0 context.Context, arg1 domain.SingleTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSingleTaskRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSingleTaskRepository)(nil).Update), arg0, arg1)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package goqueries

import (
	"context"
	"time"
)

const addEvent = `-- name: AddEvent :one
INSERT INTO events (
  task_id,
  done,
  original_sending,
  next_sending
) VALUES (
  ?,?,?,?
) RETURNING id, created_at, task_id, next_sending, original_sending, done
`

type AddEventParams struct {
	TaskID          int64     `db:"task_id"`
	Done            int64     `db:"done"`
	OriginalSending time.Time `db:"original_sending"`
	NextSending     time.Time `db:"next_sending"`
}

func (q *Queries) AddEvent(ctx context.Context, db DBTX, arg AddEventParams) (Event, error) {
	row := db.QueryRowContext(ctx, addEvent,
		arg.TaskID,
		arg.Done,
		arg.OriginalSending,
		arg.NextSending,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TaskID,
		&i.NextSending,
		&i.OriginalSending,
		&i.Done,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :many
DELETE FROM events
WHERE id = ?1
RETURNING id, created_at, task_id, next_sending, original_sending, done
`

func (q *Queries) DeleteEvent(ctx context.Context, db DBTX, id int64) ([]Event, error) {
	rows, err := db.QueryContext(ctx, deleteEvent, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TaskID,
			&i.NextSending,
			&i.OriginalSending,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvent = `-- name: GetEvent :one
SELECT id, created_at, task_id, next_sending, original_sending, done FROM events
WHERE id = ?1
`

func (q *Queries) GetEvent(ctx context.Context, db DBTX, id int64) (Event, error) {
	row := db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TaskID,
		&i.NextSending,
		&i.OriginalSending,
		&i.Done,
	)
	return i, err
}

const getLatestEvent = `-- name: GetLatestEvent :one
SELECT id, created_at, task_id, next_sending, original_sending, done FROM events
WHERE task_id = ?1
ORDER BY next_send DESC
LIMIT 1
`

func (q *Queries) GetLatestEvent(ctx context.Context, db DBTX, taskID int64) (Event, error) {
	row := db.QueryRowContext(ctx, getLatestEvent, taskID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TaskID,
		&i.NextSending,
		&i.OriginalSending,
		&i.Done,
	)
	return i, err
}

const getNearestEventTime = `-- name: GetNearestEventTime :one
SELECT next_sending FROM events
WHERE done = 0
  AND notify = 1 
ORDER BY next_sending ASC
LIMIT 1
`

func (q *Queries) GetNearestEventTime(ctx context.Context, db DBTX) (time.Time, error) {
	row := db.QueryRowContext(ctx, getNearestEventTime)
	var next_sending time.Time
	err := row.Scan(&next_sending)
	return next_sending, err
}

const listNotSendedEvents = `-- name: ListNotSendedEvents :many
SELECT id, created_at, task_id, next_sending, original_sending, done FROM events
WHERE next_sending <= ?1
  AND done = 0
  AND notify = 1
`

func (q *Queries) ListNotSendedEvents(ctx context.Context, db DBTX, till time.Time) ([]Event, error) {
	rows, err := db.QueryContext(ctx, listNotSendedEvents, till)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TaskID,
			&i.NextSending,
			&i.OriginalSending,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserEvents = `-- name: ListUserEvents :many
SELECT DISTINCT e.id, e.created_at, e.task_id, e.next_sending, e.original_sending, e.done
FROM events as e
JOIN tasks as t
ON e.task_id = t.id
WHERE t.user_id = ?
  AND next_sending <= ?
  AND next_sending >= ?
ORDER BY next_sending DESC
LIMIT ? OFFSET ?
`

type ListUserEventsParams struct {
	UserID   int64     `db:"user_id"`
	ToTime   time.Time `db:"to_time"`
	FromTime time.Time `db:"from_time"`
	Limit    int64     `db:"limit"`
	Offset   int64     `db:"offset"`
}

func (q *Queries) ListUserEvents(ctx context.Context, db DBTX, arg ListUserEventsParams) ([]Event, error) {
	rows, err := db.QueryContext(ctx, listUserEvents,
		arg.UserID,
		arg.ToTime,
		arg.FromTime,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TaskID,
			&i.NextSending,
			&i.OriginalSending,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rescheduleEvent = `-- name: RescheduleEvent :exec
UPDATE events
SET next_sending = ?
WHERE id = ?
`

type RescheduleEventParams struct {
	NextSending time.Time `db:"next_sending"`
	ID          int64     `db:"id"`
}

func (q *Queries) RescheduleEvent(ctx context.Context, db DBTX, arg RescheduleEventParams) error {
	_, err := db.ExecContext(ctx, rescheduleEvent, arg.NextSending, arg.ID)
	return err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
  next_sending     = ?,
  original_sending = ?,
  done             = ?
WHERE 
  id = ?
RETURNING id, created_at, task_id, next_sending, original_sending, done
`

type UpdateEventParams struct {
	NextSending     time.Time `db:"next_sending"`
	OriginalSending time.Time `db:"original_sending"`
	Done            int64     `db:"done"`
	ID              int64     `db:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, db DBTX, arg UpdateEventParams) (Event, error) {
	row := db.QueryRowContext(ctx, updateEvent,
		arg.NextSending,
		arg.OriginalSending,
		arg.Done,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TaskID,
		&i.NextSending,
		&i.OriginalSending,
		&i.Done,
	)
	return i, err
}

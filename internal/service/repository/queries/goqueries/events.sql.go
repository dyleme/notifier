// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package goqueries

import (
	"context"
	"time"

	domain "github.com/Dyleme/Notifier/internal/domain"
)

const addEvent = `-- name: AddEvent :one
INSERT INTO events (
    user_id,
    text,
    task_id,
    task_type,
    next_send, 
    notification_params,
    first_send
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?5
) RETURNING id, created_at, user_id, text, description, task_id, task_type, next_send, first_send, done, notify, notification_params
`

type AddEventParams struct {
	UserID             int64                     `db:"user_id"`
	Text               string                    `db:"text"`
	TaskID             int64                     `db:"task_id"`
	TaskType           string                    `db:"task_type"`
	NextSend           time.Time                 `db:"next_send"`
	NotificationParams domain.NotificationParams `db:"notification_params"`
}

func (q *Queries) AddEvent(ctx context.Context, db DBTX, arg AddEventParams) (Event, error) {
	row := db.QueryRowContext(ctx, addEvent,
		arg.UserID,
		arg.Text,
		arg.TaskID,
		arg.TaskType,
		arg.NextSend,
		arg.NotificationParams,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Text,
		&i.Description,
		&i.TaskID,
		&i.TaskType,
		&i.NextSend,
		&i.FirstSend,
		&i.Done,
		&i.Notify,
		&i.NotificationParams,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :many
DELETE FROM events
WHERE id = ?1
RETURNING id, created_at, user_id, text, description, task_id, task_type, next_send, first_send, done, notify, notification_params
`

func (q *Queries) DeleteEvent(ctx context.Context, db DBTX, id int64) ([]Event, error) {
	rows, err := db.QueryContext(ctx, deleteEvent, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Text,
			&i.Description,
			&i.TaskID,
			&i.TaskType,
			&i.NextSend,
			&i.FirstSend,
			&i.Done,
			&i.Notify,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvent = `-- name: GetEvent :one
SELECT id, created_at, user_id, text, description, task_id, task_type, next_send, first_send, done, notify, notification_params FROM events
WHERE id = ?1
`

func (q *Queries) GetEvent(ctx context.Context, db DBTX, id int64) (Event, error) {
	row := db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Text,
		&i.Description,
		&i.TaskID,
		&i.TaskType,
		&i.NextSend,
		&i.FirstSend,
		&i.Done,
		&i.Notify,
		&i.NotificationParams,
	)
	return i, err
}

const getLatestEvent = `-- name: GetLatestEvent :one
SELECT id, created_at, user_id, text, description, task_id, task_type, next_send, first_send, done, notify, notification_params FROM events
WHERE task_id = ?1
  AND task_type = ?2
ORDER BY next_send DESC
LIMIT 1
`

type GetLatestEventParams struct {
	TaskID   int64  `db:"task_id"`
	TaskType string `db:"task_type"`
}

func (q *Queries) GetLatestEvent(ctx context.Context, db DBTX, arg GetLatestEventParams) (Event, error) {
	row := db.QueryRowContext(ctx, getLatestEvent, arg.TaskID, arg.TaskType)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Text,
		&i.Description,
		&i.TaskID,
		&i.TaskType,
		&i.NextSend,
		&i.FirstSend,
		&i.Done,
		&i.Notify,
		&i.NotificationParams,
	)
	return i, err
}

const getNearestEventTime = `-- name: GetNearestEventTime :one
SELECT next_send FROM events
WHERE done = 0
  AND notify = 1 
ORDER BY next_send ASC
LIMIT 1
`

func (q *Queries) GetNearestEventTime(ctx context.Context, db DBTX) (time.Time, error) {
	row := db.QueryRowContext(ctx, getNearestEventTime)
	var next_send time.Time
	err := row.Scan(&next_send)
	return next_send, err
}

const listNotDoneEvents = `-- name: ListNotDoneEvents :many
SELECT id, created_at, user_id, text, description, task_id, task_type, next_send, first_send, done, notify, notification_params FROM events
WHERE user_id = ?1
  AND done = 0
  AND next_send < datetime('now')
ORDER BY next_send ASC
`

func (q *Queries) ListNotDoneEvents(ctx context.Context, db DBTX, userID int64) ([]Event, error) {
	rows, err := db.QueryContext(ctx, listNotDoneEvents, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Text,
			&i.Description,
			&i.TaskID,
			&i.TaskType,
			&i.NextSend,
			&i.FirstSend,
			&i.Done,
			&i.Notify,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotSendedEvents = `-- name: ListNotSendedEvents :many
SELECT id, created_at, user_id, text, description, task_id, task_type, next_send, first_send, done, notify, notification_params FROM events
WHERE next_send <= ?1
  AND done = 0
  AND notify = 1
`

func (q *Queries) ListNotSendedEvents(ctx context.Context, db DBTX, till time.Time) ([]Event, error) {
	rows, err := db.QueryContext(ctx, listNotSendedEvents, till)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Text,
			&i.Description,
			&i.TaskID,
			&i.TaskType,
			&i.NextSend,
			&i.FirstSend,
			&i.Done,
			&i.Notify,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserDailyEvents = `-- name: ListUserDailyEvents :many
SELECT id, created_at, user_id, text, description, task_id, task_type, next_send, first_send, done, notify, notification_params FROM events
WHERE user_id = ?1
  AND datetime(next_send, ?2) BETWEEN date('now') AND date('now', '+1 day')
ORDER BY next_send ASC
`

type ListUserDailyEventsParams struct {
	UserID     int64       `db:"user_id"`
	TimeOffset interface{} `db:"time_offset"`
}

func (q *Queries) ListUserDailyEvents(ctx context.Context, db DBTX, arg ListUserDailyEventsParams) ([]Event, error) {
	rows, err := db.QueryContext(ctx, listUserDailyEvents, arg.UserID, arg.TimeOffset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Text,
			&i.Description,
			&i.TaskID,
			&i.TaskType,
			&i.NextSend,
			&i.FirstSend,
			&i.Done,
			&i.Notify,
			&i.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserEvents = `-- name: ListUserEvents :many
SELECT DISTINCT e.id, e.created_at, e.user_id, e.text, e.description, e.task_id, e.task_type, e.next_send, e.first_send, e.done, e.notify, e.notification_params 
FROM events as e
LEFT JOIN smth2tags as s2t
  ON e.id = s2t.smth_id
LEFT JOIN tags as t
  ON s2t.tag_id = t.id
WHERE e.user_id = ?1
  AND next_send BETWEEN ?2 AND ?3
  AND (
    ?4 IS NULL 
    OR t.id IN (SELECT value FROM json_each(@tag_ids))
  )
ORDER BY next_send DESC
LIMIT ?6 OFFSET ?5
`

type ListUserEventsParams struct {
	UserID int64       `db:"user_id"`
	TagIds interface{} `db:"tag_ids"`
	Off    int64       `db:"off"`
	Lim    int64       `db:"lim"`
}

type ListUserEventsRow struct {
	Event Event `db:"event"`
}

func (q *Queries) ListUserEvents(ctx context.Context, db DBTX, arg ListUserEventsParams) ([]ListUserEventsRow, error) {
	rows, err := db.QueryContext(ctx, listUserEvents,
		arg.UserID,
		arg.TagIds,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserEventsRow
	for rows.Next() {
		var i ListUserEventsRow
		if err := rows.Scan(
			&i.Event.ID,
			&i.Event.CreatedAt,
			&i.Event.UserID,
			&i.Event.Text,
			&i.Event.Description,
			&i.Event.TaskID,
			&i.Event.TaskType,
			&i.Event.NextSend,
			&i.Event.FirstSend,
			&i.Event.Done,
			&i.Event.Notify,
			&i.Event.NotificationParams,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET text = ?1,
    next_send = ?2,
    first_send = ?3,
    done = ?4
WHERE id = ?5
RETURNING id, created_at, user_id, text, description, task_id, task_type, next_send, first_send, done, notify, notification_params
`

type UpdateEventParams struct {
	Text      string    `db:"text"`
	NextSend  time.Time `db:"next_send"`
	FirstSend time.Time `db:"first_send"`
	Done      int64     `db:"done"`
	ID        int64     `db:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, db DBTX, arg UpdateEventParams) (Event, error) {
	row := db.QueryRowContext(ctx, updateEvent,
		arg.Text,
		arg.NextSend,
		arg.FirstSend,
		arg.Done,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Text,
		&i.Description,
		&i.TaskID,
		&i.TaskType,
		&i.NextSend,
		&i.FirstSend,
		&i.Done,
		&i.Notify,
		&i.NotificationParams,
	)
	return i, err
}

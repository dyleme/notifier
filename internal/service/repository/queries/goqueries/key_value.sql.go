// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: key_value.sql

package goqueries

import (
	"context"
)

const deleteValue = `-- name: DeleteValue :exec
DELETE
FROM key_value
WHERE key = $1
`

func (q *Queries) DeleteValue(ctx context.Context, db DBTX, key string) error {
	_, err := db.Exec(ctx, deleteValue, key)
	return err
}

const getValue = `-- name: GetValue :one
SELECT value
FROM key_value
WHERE key = $1
`

func (q *Queries) GetValue(ctx context.Context, db DBTX, key string) ([]byte, error) {
	row := db.QueryRow(ctx, getValue, key)
	var value []byte
	err := row.Scan(&value)
	return value, err
}

const setValue = `-- name: SetValue :exec
INSERT INTO key_value
(key, value)
VALUES ($1, $2)
ON CONFLICT (key)
DO UPDATE
SET value = $2
`

type SetValueParams struct {
	Key   string `db:"key"`
	Value []byte `db:"value"`
}

func (q *Queries) SetValue(ctx context.Context, db DBTX, arg SetValueParams) error {
	_, err := db.Exec(ctx, setValue, arg.Key, arg.Value)
	return err
}

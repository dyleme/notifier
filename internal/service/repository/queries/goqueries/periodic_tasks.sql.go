// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: periodic_tasks.sql

package goqueries

import (
	"context"

	domains "github.com/Dyleme/Notifier/internal/domains"
	"github.com/jackc/pgx/v5/pgtype"
)

const addPeriodicTask = `-- name: AddPeriodicTask :one
INSERT INTO periodic_tasks (user_id,
                             text,
                             start,
                             smallest_period,
                             biggest_period,
                             description,
                             notification_params
)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7)
RETURNING id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params, notify
`

type AddPeriodicTaskParams struct {
	UserID             int32                      `db:"user_id"`
	Text               string                     `db:"text"`
	Start              pgtype.Timestamptz         `db:"start"`
	SmallestPeriod     int32                      `db:"smallest_period"`
	BiggestPeriod      int32                      `db:"biggest_period"`
	Description        pgtype.Text                `db:"description"`
	NotificationParams domains.NotificationParams `db:"notification_params"`
}

func (q *Queries) AddPeriodicTask(ctx context.Context, db DBTX, arg AddPeriodicTaskParams) (PeriodicTask, error) {
	row := db.QueryRow(ctx, addPeriodicTask,
		arg.UserID,
		arg.Text,
		arg.Start,
		arg.SmallestPeriod,
		arg.BiggestPeriod,
		arg.Description,
		arg.NotificationParams,
	)
	var i PeriodicTask
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.SmallestPeriod,
		&i.BiggestPeriod,
		&i.NotificationParams,
		&i.Notify,
	)
	return i, err
}

const countListPeriodicTasks = `-- name: CountListPeriodicTasks :one
SELECT COUNT(*)
FROM periodic_tasks as pt
LEFT JOIN smth2tags as s2t
  ON pt.id = s2t.smth_id
LEFT JOIN tags as t
  ON s2t.tag_id = t.id
WHERE pt.user_id = $1
  AND (
    t.id = ANY ($2::int[]) 
    OR array_length($2::int[], 1) is null
  )
`

type CountListPeriodicTasksParams struct {
	UserID int32   `db:"user_id"`
	TagIds []int32 `db:"tag_ids"`
}

func (q *Queries) CountListPeriodicTasks(ctx context.Context, db DBTX, arg CountListPeriodicTasksParams) (int64, error) {
	row := db.QueryRow(ctx, countListPeriodicTasks, arg.UserID, arg.TagIds)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deletePeriodicTask = `-- name: DeletePeriodicTask :many
DELETE
FROM periodic_tasks
WHERE id = $1
RETURNING id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params, notify
`

func (q *Queries) DeletePeriodicTask(ctx context.Context, db DBTX, id int32) ([]PeriodicTask, error) {
	rows, err := db.Query(ctx, deletePeriodicTask, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PeriodicTask
	for rows.Next() {
		var i PeriodicTask
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.Description,
			&i.UserID,
			&i.Start,
			&i.SmallestPeriod,
			&i.BiggestPeriod,
			&i.NotificationParams,
			&i.Notify,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPeriodicTask = `-- name: GetPeriodicTask :one
SELECT id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params, notify
FROM periodic_tasks
WHERE id = $1
`

func (q *Queries) GetPeriodicTask(ctx context.Context, db DBTX, id int32) (PeriodicTask, error) {
	row := db.QueryRow(ctx, getPeriodicTask, id)
	var i PeriodicTask
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.SmallestPeriod,
		&i.BiggestPeriod,
		&i.NotificationParams,
		&i.Notify,
	)
	return i, err
}

const listPeriodicTasks = `-- name: ListPeriodicTasks :many
SELECT pt.id, pt.created_at, pt.text, pt.description, pt.user_id, pt.start, pt.smallest_period, pt.biggest_period, pt.notification_params, pt.notify
FROM periodic_tasks as pt
LEFT JOIN smth2tags as s2t
  ON pt.id = s2t.smth_id
LEFT JOIN tags as t
  ON s2t.tag_id = t.id
WHERE pt.user_id = $1
  AND (
    t.id = ANY ($2::int[]) 
    OR array_length($2::int[], 1) is null
  )
ORDER BY pt.id DESC
LIMIT $4 OFFSET $3
`

type ListPeriodicTasksParams struct {
	UserID int32   `db:"user_id"`
	TagIds []int32 `db:"tag_ids"`
	Off    int32   `db:"off"`
	Lim    int32   `db:"lim"`
}

type ListPeriodicTasksRow struct {
	PeriodicTask PeriodicTask `db:"periodic_task"`
}

func (q *Queries) ListPeriodicTasks(ctx context.Context, db DBTX, arg ListPeriodicTasksParams) ([]ListPeriodicTasksRow, error) {
	rows, err := db.Query(ctx, listPeriodicTasks,
		arg.UserID,
		arg.TagIds,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPeriodicTasksRow
	for rows.Next() {
		var i ListPeriodicTasksRow
		if err := rows.Scan(
			&i.PeriodicTask.ID,
			&i.PeriodicTask.CreatedAt,
			&i.PeriodicTask.Text,
			&i.PeriodicTask.Description,
			&i.PeriodicTask.UserID,
			&i.PeriodicTask.Start,
			&i.PeriodicTask.SmallestPeriod,
			&i.PeriodicTask.BiggestPeriod,
			&i.PeriodicTask.NotificationParams,
			&i.PeriodicTask.Notify,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePeriodicTask = `-- name: UpdatePeriodicTask :one
UPDATE periodic_tasks
SET start               = $1,
    text                = $2,
    description         = $3,
    notification_params = $4,
    smallest_period     = $5,
    biggest_period      = $6
WHERE id = $7
  AND user_id = $8
RETURNING id, created_at, text, description, user_id, start, smallest_period, biggest_period, notification_params, notify
`

type UpdatePeriodicTaskParams struct {
	Start              pgtype.Timestamptz         `db:"start"`
	Text               string                     `db:"text"`
	Description        pgtype.Text                `db:"description"`
	NotificationParams domains.NotificationParams `db:"notification_params"`
	SmallestPeriod     int32                      `db:"smallest_period"`
	BiggestPeriod      int32                      `db:"biggest_period"`
	ID                 int32                      `db:"id"`
	UserID             int32                      `db:"user_id"`
}

func (q *Queries) UpdatePeriodicTask(ctx context.Context, db DBTX, arg UpdatePeriodicTaskParams) (PeriodicTask, error) {
	row := db.QueryRow(ctx, updatePeriodicTask,
		arg.Start,
		arg.Text,
		arg.Description,
		arg.NotificationParams,
		arg.SmallestPeriod,
		arg.BiggestPeriod,
		arg.ID,
		arg.UserID,
	)
	var i PeriodicTask
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Text,
		&i.Description,
		&i.UserID,
		&i.Start,
		&i.SmallestPeriod,
		&i.BiggestPeriod,
		&i.NotificationParams,
		&i.Notify,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tag.sql

package goqueries

import (
	"context"
	"strings"
)

const addTag = `-- name: AddTag :one
INSERT INTO 
tags (name, user_id) 
VALUES (?1, ?2)
RETURNING id, created_at, name, user_id
`

type AddTagParams struct {
	Name   string `db:"name"`
	UserID int64  `db:"user_id"`
}

func (q *Queries) AddTag(ctx context.Context, db DBTX, arg AddTagParams) (Tag, error) {
	row := db.QueryRowContext(ctx, addTag, arg.Name, arg.UserID)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const addTagsToSmth = `-- name: AddTagsToSmth :exec
INSERT INTO
smth2tags (smth_id, tag_id, user_id)
VALUES (?1, ?2, ?3)
`

type AddTagsToSmthParams struct {
	SmthID int64 `db:"smth_id"`
	TagID  int64 `db:"tag_id"`
	UserID int64 `db:"user_id"`
}

func (q *Queries) AddTagsToSmth(ctx context.Context, db DBTX, arg AddTagsToSmthParams) error {
	_, err := db.ExecContext(ctx, addTagsToSmth, arg.SmthID, arg.TagID, arg.UserID)
	return err
}

const deleteAllTagsForSmth = `-- name: DeleteAllTagsForSmth :exec
DELETE FROM smth2tags
WHERE smth_id = ?1
`

func (q *Queries) DeleteAllTagsForSmth(ctx context.Context, db DBTX, smthID int64) error {
	_, err := db.ExecContext(ctx, deleteAllTagsForSmth, smthID)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE id = ?1
`

func (q *Queries) DeleteTag(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, deleteTag, id)
	return err
}

const deleteTagsFromSmth = `-- name: DeleteTagsFromSmth :exec
DELETE FROM smth2tags
WHERE smth_id = ?1 
AND tag_id IN /*SLICE:tag_ids*/?
`

type DeleteTagsFromSmthParams struct {
	SmthID int64   `db:"smth_id"`
	TagIds []int64 `db:"tag_ids"`
}

func (q *Queries) DeleteTagsFromSmth(ctx context.Context, db DBTX, arg DeleteTagsFromSmthParams) error {
	query := deleteTagsFromSmth
	var queryParams []interface{}
	queryParams = append(queryParams, arg.SmthID)
	if len(arg.TagIds) > 0 {
		for _, v := range arg.TagIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:tag_ids*/?", strings.Repeat(",?", len(arg.TagIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:tag_ids*/?", "NULL", 1)
	}
	_, err := db.ExecContext(ctx, query, queryParams...)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, created_at, name, user_id FROM tags
WHERE id = ?1
`

func (q *Queries) GetTag(ctx context.Context, db DBTX, id int64) (Tag, error) {
	row := db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.UserID,
	)
	return i, err
}

const listTags = `-- name: ListTags :many
SELECT id, created_at, name, user_id FROM tags
WHERE user_id = ?1
LIMIT ?3 
OFFSET ?2
`

type ListTagsParams struct {
	UserID int64 `db:"user_id"`
	Off    int64 `db:"off"`
	Lim    int64 `db:"lim"`
}

func (q *Queries) ListTags(ctx context.Context, db DBTX, arg ListTagsParams) ([]Tag, error) {
	rows, err := db.QueryContext(ctx, listTags, arg.UserID, arg.Off, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsForSmth = `-- name: ListTagsForSmth :many
SELECT t.id, t.created_at, t.name, t.user_id FROM smth2tags as s2t
JOIN tags as t 
ON s2t.tag_id = t.id
WHERE smth_id = ?1
`

func (q *Queries) ListTagsForSmth(ctx context.Context, db DBTX, smthID int64) ([]Tag, error) {
	rows, err := db.QueryContext(ctx, listTagsForSmth, smthID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsForSmths = `-- name: ListTagsForSmths :many
SELECT s2t.smth_id, t.id, t.created_at, t.name, t.user_id FROM smth2tags as s2t
JOIN tags as t 
ON s2t.tag_id = t.id
WHERE smth_id IN /*SLICE:smth_ids*/?
`

type ListTagsForSmthsRow struct {
	SmthID int64 `db:"smth_id"`
	Tag    Tag   `db:"tag"`
}

func (q *Queries) ListTagsForSmths(ctx context.Context, db DBTX, smthIds []int64) ([]ListTagsForSmthsRow, error) {
	query := listTagsForSmths
	var queryParams []interface{}
	if len(smthIds) > 0 {
		for _, v := range smthIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:smth_ids*/?", strings.Repeat(",?", len(smthIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:smth_ids*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTagsForSmthsRow
	for rows.Next() {
		var i ListTagsForSmthsRow
		if err := rows.Scan(
			&i.SmthID,
			&i.Tag.ID,
			&i.Tag.CreatedAt,
			&i.Tag.Name,
			&i.Tag.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags
SET name = ?1
WHERE id = ?2
`

type UpdateTagParams struct {
	Name string `db:"name"`
	ID   int64  `db:"id"`
}

func (q *Queries) UpdateTag(ctx context.Context, db DBTX, arg UpdateTagParams) error {
	_, err := db.ExecContext(ctx, updateTag, arg.Name, arg.ID)
	return err
}

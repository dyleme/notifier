// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: default_user_notifications.sql

package goqueries

import (
	"context"

	domain "github.com/Dyleme/Notifier/internal/domain"
)

const getDefaultUserNotificationParams = `-- name: GetDefaultUserNotificationParams :one
SELECT user_id, created_at, params
FROM default_user_notification_params
WHERE user_id = $1
`

func (q *Queries) GetDefaultUserNotificationParams(ctx context.Context, db DBTX, userID int32) (DefaultUserNotificationParam, error) {
	row := db.QueryRow(ctx, getDefaultUserNotificationParams, userID)
	var i DefaultUserNotificationParam
	err := row.Scan(&i.UserID, &i.CreatedAt, &i.Params)
	return i, err
}

const setDefaultUserNotificationParams = `-- name: SetDefaultUserNotificationParams :one
INSERT INTO default_user_notification_params (user_id,
                                              params
)
VALUES ($1,
        $2
       )
ON CONFLICT (user_id)
    DO UPDATE SET params          = $2
RETURNING user_id, created_at, params
`

type SetDefaultUserNotificationParamsParams struct {
	UserID int32                     `db:"user_id"`
	Params domain.NotificationParams `db:"params"`
}

func (q *Queries) SetDefaultUserNotificationParams(ctx context.Context, db DBTX, arg SetDefaultUserNotificationParamsParams) (DefaultUserNotificationParam, error) {
	row := db.QueryRow(ctx, setDefaultUserNotificationParams, arg.UserID, arg.Params)
	var i DefaultUserNotificationParam
	err := row.Scan(&i.UserID, &i.CreatedAt, &i.Params)
	return i, err
}

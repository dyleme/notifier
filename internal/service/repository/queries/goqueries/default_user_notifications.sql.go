// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: default_user_notifications.sql

package goqueries

import (
	"context"
)

const getDefaultUserNotificationParams = `-- name: GetDefaultUserNotificationParams :one
SELECT user_id, params
FROM default_user_notification_params
WHERE user_id = ?1
`

func (q *Queries) GetDefaultUserNotificationParams(ctx context.Context, db DBTX, userID int64) (DefaultUserNotificationParam, error) {
	row := db.QueryRowContext(ctx, getDefaultUserNotificationParams, userID)
	var i DefaultUserNotificationParam
	err := row.Scan(&i.UserID, &i.Params)
	return i, err
}

const setDefaultUserNotificationParams = `-- name: SetDefaultUserNotificationParams :one
INSERT INTO default_user_notification_params (user_id,
                                              params
)
VALUES (?1,
        ?2
       )
ON CONFLICT (user_id)
    DO UPDATE SET params          = ?2
RETURNING user_id, params
`

type SetDefaultUserNotificationParamsParams struct {
	UserID int64  `db:"user_id"`
	Params []byte `db:"params"`
}

func (q *Queries) SetDefaultUserNotificationParams(ctx context.Context, db DBTX, arg SetDefaultUserNotificationParamsParams) (DefaultUserNotificationParam, error) {
	row := db.QueryRowContext(ctx, setDefaultUserNotificationParams, arg.UserID, arg.Params)
	var i DefaultUserNotificationParam
	err := row.Scan(&i.UserID, &i.Params)
	return i, err
}
